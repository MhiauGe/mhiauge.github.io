<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Qt读取MacOS版本号的正确姿势</title>
    <url>/mhiauge.github.io/2020/12/07/Qt%E8%AF%BB%E5%8F%96MacOS%E7%89%88%E6%9C%AC%E5%8F%B7%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</url>
    <content><![CDATA[<h4 id="1-Qt读取MacOS版本号的两种错误方式"><a href="#1-Qt读取MacOS版本号的两种错误方式" class="headerlink" title="1.Qt读取MacOS版本号的两种错误方式"></a>1.Qt读取MacOS版本号的两种错误方式</h4><ul>
<li><h5 id="通过QSysInfo读取"><a href="#通过QSysInfo读取" class="headerlink" title="通过QSysInfo读取"></a>通过QSysInfo读取</h5><p>​    通过这种方式读取，优点是可以直接读取系统版本号和对应的名称，<u>缺点是需要确保当前使用的Qt版本支持想要读取的MacOS 的版本</u>。但往往我们需要支持最新的MacOS版本，就需要将Qt升到一个很高的版本，但我们同时又想继续使用当前Qt版本，比如Qt5.13.0，那么就无法满足要求了。</p>
<p>示例代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QString macVersion = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    QSysInfo::MacVersion mv = QSysInfo::macVersion();</span><br><span class="line">    <span class="keyword">switch</span> (mv) &#123;</span><br><span class="line">    <span class="keyword">case</span> QSysInfo::MV_CHEETAH:</span><br><span class="line">        macVersion = <span class="string">&quot;Mac OS X Cheetah&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> QSysInfo::MV_PUMA:</span><br><span class="line">        macVersion = <span class="string">&quot;Mac OS X Puma&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> QSysInfo::MV_JAGUAR:</span><br><span class="line">        macVersion = <span class="string">&quot;Mac OS X Jaguar&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> QSysInfo::MV_PANTHER:</span><br><span class="line">        macVersion = <span class="string">&quot;Mac OS X Panther&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> QSysInfo::MV_TIGER:</span><br><span class="line">        macVersion = <span class="string">&quot;Mac OS X Tiger&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> QSysInfo::MV_LEOPARD:</span><br><span class="line">        macVersion = <span class="string">&quot;Mac OS X Leopard&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> QSysInfo::MV_SNOWLEOPARD:</span><br><span class="line">        macVersion = <span class="string">&quot;Mac OS X Snow Leopard&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> QSysInfo::MV_LION:</span><br><span class="line">        macVersion = <span class="string">&quot;WOS X Lion&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> QSysInfo::MV_MOUNTAINLION:</span><br><span class="line">        macVersion = <span class="string">&quot;OS X Mountain Lion&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> QSysInfo::MV_MAVERICKS:</span><br><span class="line">        macVersion = <span class="string">&quot;OS X Mavericks&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> QSysInfo::MV_YOSEMITE:</span><br><span class="line">        macVersion = <span class="string">&quot;OS X Yosemite&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> QSysInfo::MV_SIERRA:</span><br><span class="line">        macVersion = <span class="string">&quot;macOS Sierra&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        macVersion = <span class="string">&quot;DefaultSystem&quot;</span>;               <span class="comment">//默认版本</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> macVersion;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><h5 id="通过QOperatingSystemVersion读取"><a href="#通过QOperatingSystemVersion读取" class="headerlink" title="通过QOperatingSystemVersion读取"></a>通过QOperatingSystemVersion读取</h5><p>​    通过这种方式可以用旧的Qt框架读取到新的MacOS版本，因为是分别读的majorVer、minorVer和microVer然后再组合起来。但是在最新系统big sur上面，有一个小问题，<u>读取出来的是10.16.0，如果使用MacOS系统关于信息查看，则可以看到版本号是11.1</u>，所以是有问题的。</p>
<p>示例代码：</p>
<hr>
<a id="more"></a> 

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> majorVersion = QOperatingSystemVersion::current().majorVersion();</span><br><span class="line">  <span class="keyword">int</span> minorVersion = QOperatingSystemVersion::current().minorVersion();</span><br><span class="line">  <span class="keyword">int</span> microVersion = QOperatingSystemVersion::current().microVersion();</span><br><span class="line">QStringList macVerList = QStringList() &lt;&lt; QString::number(majorVersion) &lt;&lt; QString::number(minorVersion) &lt;&lt; QString::number(microVersion);</span><br><span class="line">  QString macVerStr = macVerList.join(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  qDebug() &lt;&lt; <span class="string">&quot;mac version&quot;</span> &lt;&lt; macVerStr;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ol start="2">
<li><h4 id="Qt读取MacOS版本号的两种正确方式"><a href="#Qt读取MacOS版本号的两种正确方式" class="headerlink" title="Qt读取MacOS版本号的两种正确方式"></a>Qt读取MacOS版本号的两种正确方式</h4><p>​    既然Qt提供的方式不好用，那么我们直接使用MacOS系统提供的方式是否更可靠呢，答案是肯定的。</p>
<p>​    下面有两种方式都可以正确读取到版本号：</p>
<ol>
<li><h5 id="读取SystemVersion-plist文件"><a href="#读取SystemVersion-plist文件" class="headerlink" title="读取SystemVersion.plist文件"></a>读取SystemVersion.plist文件</h5></li>
</ol>
<p>查看SystemVersion.plist文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取系统信息</span></span><br><span class="line">cat /System/Library/CoreServices/SystemVersion.plist</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">plist</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="meta-string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>ProductBuildVersion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">string</span>&gt;</span>20C5048l<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>ProductCopyright<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">string</span>&gt;</span>1983-2020 Apple Inc.<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>ProductName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">string</span>&gt;</span>macOS<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>ProductUserVisibleVersion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">string</span>&gt;</span>11.1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>ProductVersion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">string</span>&gt;</span>11.1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>iOSSupportVersion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">string</span>&gt;</span>14.3<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    之后使用Qt的xml相关处理类即可读取(代码就不写了。。)</p>
</li>
</ol>
<ol start="2">
<li><h5 id="使用系统命令sw-vers"><a href="#使用系统命令sw-vers" class="headerlink" title="使用系统命令sw_vers"></a>使用系统命令sw_vers</h5><p>​    这种方式是我自己使用的方式，命令行输入sw_vers可以看到:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ProductName:    Mac OS X</span><br><span class="line">ProductVersion: <span class="number">10.13</span><span class="number">.4</span></span><br><span class="line">BuildVersion:   <span class="number">17E199</span></span><br></pre></td></tr></table></figure>

<p>​    只想获取版本号可以输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sw_vers | awk <span class="string">&#x27;NR==2 &#123;print $2&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">10.13.4</span><br></pre></td></tr></table></figure>

<p>然后使用QProcess读取结果：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QStringList options;</span><br><span class="line">options &lt;&lt; <span class="string">&quot;-c&quot;</span> &lt;&lt; <span class="string">&quot;sw_vers | awk &#x27;NR==2 &#123;print $2&#125;&#x27;&quot;</span>;</span><br><span class="line">QProcess process;</span><br><span class="line">process.start(<span class="string">&quot;/bin/bash&quot;</span>, options);</span><br><span class="line">process.waitForFinished(<span class="number">3000</span>);</span><br><span class="line">process.waitForReadyRead(<span class="number">3000</span>);</span><br><span class="line">QString strResult = process.readAll().simplified();</span><br><span class="line">process.close();</span><br><span class="line">      </span><br><span class="line"><span class="keyword">if</span> (strResult.isEmpty())</span><br><span class="line">    qCritical() &lt;&lt; <span class="string">&quot;[ERROR]&quot;</span> &lt;&lt; <span class="string">&quot;read version failed! version is empty!&quot;</span>;</span><br><span class="line">      </span><br><span class="line">QVersionNumber verNum = QVersionNumber::fromString(strResult);</span><br><span class="line">QString strVerNum = QVersionNumber(verNum.majorVersion()</span><br><span class="line">                                   , verNum.minorVersion()</span><br><span class="line">                                   , verNum.microVersion())</span><br><span class="line">    .toString();</span><br><span class="line">qDebug() &lt;&lt; <span class="string">&quot;current mac os version is&quot;</span> &lt;&lt; strVerNum; <span class="comment">// 11.1.0</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>qt</category>
      </categories>
      <tags>
        <tag>qt 版本号 MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>UOS安装qt开发环境</title>
    <url>/mhiauge.github.io/2020/08/15/UOS%E5%AE%89%E8%A3%85qt%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install qtcreator     //安装Craetor IDE</span><br><span class="line">sudo apt install qt5-default   //安装qt的配置</span><br><span class="line">sudo apt install libdtkwidget-dev  //安装dtk开发所需要环境</span><br><span class="line">//也可以将上面的合成一个命令</span><br><span class="line">sudo apt install libdtkwidget-dev qt5-default qtcreator</span><br><span class="line">sudo apt <span class="built_in">source</span> qt5-default    //qt源码包，此会安装在当前所处目录下，建议更换目录再执行，推荐放在</span><br><span class="line"></span><br><span class="line">//==============================================================</span><br><span class="line"></span><br><span class="line">// 编译可能还需要安装一些依赖</span><br><span class="line">sudo apt-get install qtdeclarative5-dev qtbase5-private-dev libqt5websockets5-dev libqt5webkit5-dev libxv-dev libglew-dev libasound2-dev librtmp-dev libpoppler-dev libpoppler-qt5-dev librtmp-dev libdframeworkdbus-dev qtwebengine5-dev qtpositioning5-dev libssl-dev libcurl4-openssl-dev libcap-dev libfmt-dev libspdlog-dev libpoppler-dev libpoppler-qt5-dev librtmp-dev</span><br><span class="line"></span><br><span class="line">poppler找不到</span><br><span class="line">sudo apt install libpoppler-dev</span><br><span class="line">sudo apt-get install libpoppler-qt5-dev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rtmp找不到</span><br><span class="line">sudo apt install librtmp-dev</span><br></pre></td></tr></table></figure>


<p>集合成一个命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install qtcreator qt5-default libdtkwidget-dev qtdeclarative5-dev qtbase5-private-dev libqt5websockets5-dev libqt5webkit5-dev libxv-dev libglew-dev libasound2-dev librtmp-dev libpoppler-dev libpoppler-qt5-dev librtmp-dev libdframeworkdbus-dev qtwebengine5-dev qtpositioning5-dev libssl-dev libcurl4-openssl-dev libcap-dev libfmt-dev libspdlog-dev libpoppler-dev libpoppler-qt5-dev librtmp-dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>qt</category>
      </categories>
  </entry>
  <entry>
    <title>notion添加pac自定义规则方法</title>
    <url>/mhiauge.github.io/2020/07/11/notion%E6%B7%BB%E5%8A%A0pac%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%84%E5%88%99%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><ol>
<li><strong>已fq</strong> （最近两个月，notion被GFW屏蔽，导致国内网络无法正常访问，所以要想有更好的体验，最好的办法还是fq）</li>
</ol>
<h1 id="notion介绍"><a href="#notion介绍" class="headerlink" title="notion介绍"></a>notion介绍</h1><h3 id="什么是notion？"><a href="#什么是notion？" class="headerlink" title="什么是notion？"></a>什么是notion？</h3><p>笔记类的软件和应用有很多，从老牌的onenote、evernote，到国内的有道、为知等等……</p>
<p>Notion算是国外一款比较新的ALL-IN-ONE笔记工具，可谓功能强大，界面美观。</p>
<p><img src="https://www.helloimg.com/images/2020/07/11/_202007111522041b932bd55d276075.png" alt="_202007111522041b932bd55d276075.png"></p>
<hr>
<a id="more"></a> 

<h3 id="我为什么放弃印象笔记选择notion？"><a href="#我为什么放弃印象笔记选择notion？" class="headerlink" title="我为什么放弃印象笔记选择notion？"></a>我为什么放弃印象笔记选择notion？</h3><p>​    纵然notion现在还有千般不好，比如必须fq，不能离线使用。但是其强大的设计理念，也就是block，已经深深让我着迷。block完全可以看做是面向对象编程的典型用例，一切皆对象。</p>
<p>​    最重要的，notion已经不仅仅是一个笔记软件，其强大的扩展性可以花很长的时间去探索、发现。比如表格，在印象笔记中，表格已经做的很好了，在每个单元格中也可以插入诸如checkbox之类的高级控件，比国内如有道云笔记的表格功能好用太多，只不过印象笔记的windows客户端确实很丑。即便如此，印象笔记的表格功能和notion的表格相比，简直小巫见大巫，notion表格支持formula表达式，可以进行简单的编程，实现一些特殊应用， 比如进度条。而表格功能仅仅是notion几十种block中的一种。</p>
<p>​    不论在界面美观度还是跨平台使用，比如linux<code>notion网页版有着和客户端几乎一致的体验</code>，notion都是不二选择。</p>
<h1 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h1><h2 id="Windows："><a href="#Windows：" class="headerlink" title="Windows："></a>Windows：</h2><p>我们都知道ss的windows客户端，可以直接编辑本地PAC文件，但是有人要问，PAC语法我又不会，怎么办呢?</p>
<p>其实我们根本不需要知道PAC文件的语法， 只需要参考现有的网址是怎么写的，我们就怎么写。</p>
<p>如果已经从GFWlist更新过本地PAC，那么看起来差不多是这样的<br><img src="https://www.helloimg.com/images/2020/07/11/_202007111443430e128f7fc07973c7.png" alt="_202007111443430e128f7fc07973c7.png"><br>可以看到图中已经有了notion相关网址，不过要注意的是我们<strong>最好不好直接编辑PAC.txt这个文件</strong>，因为只要每次从服务器更新，该文件就会被重置，我们应该编辑user-rule.txt这个文件，这个文件是专门用于用户自定义的。</p>
<p>我们打开文件，写入：</p>
<p><code>notion.so,
||notion.so</code></p>
<p>这样ss会在下次启动在PAC.txt中自动生成上图中的代码。</p>
<h2 id="Android："><a href="#Android：" class="headerlink" title="Android："></a>Android：</h2><p>android版本的自定义规则语法和pc不一样，类似这样：</p>
<p><code>(?:^|\.)1688\.com\.au$</code></p>
<p>但其实我们直接使用和pc一样的语法也是可以的，类似这样：</p>
<p><img src="https://www.helloimg.com/images/2020/07/11/_20200711145034b24ebf611a254ffa.jpg" alt="_20200711145034b24ebf611a254ffa.jpg"></p>
<p>最后修改配置文件：路由选择”自定义规则”即可</p>
<blockquote>
<p>注1：要将notion.so和GFW合并，我们只需要先输入notion.so的网址，然后点击右上角加号图标，选择GFW列表即可增加。</p>
</blockquote>
<blockquote>
<p>注2：网址一定要写notion.so,前面不要加www，不然你会发现虽然可以登录，但是不能同步,一直显示Saving..</p>
</blockquote>
<h1 id="扩展补充"><a href="#扩展补充" class="headerlink" title="扩展补充"></a>扩展补充</h1><p>另外，提供一个notion中文网站：<a href="https://linmi.cc/notiongroup">notion中文社区</a>, 里面有一些很有意思的notion应用</p>
]]></content>
      <categories>
        <category>notion</category>
      </categories>
      <tags>
        <tag>notion</tag>
      </tags>
  </entry>
  <entry>
    <title>在notion中插入流程图和思维导图</title>
    <url>/mhiauge.github.io/2020/09/04/%E5%9C%A8notion%E4%B8%AD%E6%8F%92%E5%85%A5%E6%B5%81%E7%A8%8B%E5%9B%BE%E5%92%8C%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</url>
    <content><![CDATA[<p>   用过一段时间notion你会发现，notion并不直接支持流程图和思维导图等数据类型。不过notion提供了十分强大的abstract类型，通过它，我们可以实现插入交互式的流程图和思维导图，当然也可插入其他支持的页面。下面来看具体操作：</p>
<pre><code>我使用的在线作图网站为process on，首先在process on中画好图：</code></pre><p><img src="https://www.helloimg.com/images/2020/09/04/WX20200903-2356582x5173d71df7e728d5.png" alt="WX20200903-2356582x5173d71df7e728d5.png"></p>
<hr>
<a id="more"></a> 
<p>然后点击右上角分享按钮：<br><img src="https://www.helloimg.com/images/2020/09/04/WX20200903-2358352xa5ddf0b03de7c68e.png" alt="WX20200903-2358352xa5ddf0b03de7c68e.png"><br>复制链接，然后在notion中输入/abs,选择abstract<br><img src="https://www.helloimg.com/images/2020/09/04/WX20200904-0000162x4c4c9cae374ac287.png" alt="WX20200904-0000162x4c4c9cae374ac287.png"><br>粘贴刚才复制的链接：<br><img src="https://www.helloimg.com/images/2020/09/04/WX20200904-0000562x997ae12f2ecd8731.png" alt="WX20200904-0000562x997ae12f2ecd8731.png"><br>成功：<br><img src="https://www.helloimg.com/images/2020/09/04/WX20200901-1833282x2bc2323fd9966ff9.png" alt="WX20200901-1833282x2bc2323fd9966ff9.png"><br>要注意：不要登录，不要登录，不要登录。不然会变成下面这样，且无法逆转，只能删除重新添加：<br><img src="https://www.helloimg.com/images/2020/09/04/WX20200901-1833562x03ce9811db1fb9fd.png" alt="WX20200901-1833562x03ce9811db1fb9fd.png"></p>
]]></content>
      <categories>
        <category>notion</category>
      </categories>
      <tags>
        <tag>notion</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在notion中修改默认中文字体(notion-enhancer方式)</title>
    <url>/mhiauge.github.io/2020/12/15/%E5%A6%82%E4%BD%95%E5%9C%A8notion%E4%B8%AD%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93-notion-enhancer%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>notion修改中文字体</p>
<p>第一步：关闭notion-enhancer</p>
<p>第二步：打开theme.css(我的目录在C:\Users\Mhiau\AppData\Roaming\npm\node_modules\notion-enhancer\mods\core\css\theme.css)</p>
<p>第三步：</p>
<p>在如下位置：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** fonts **/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[style*=<span class="string">&#x27;Segoe UI&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="built_in">var</span>(--theme--font_sans) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[style*=<span class="string">&#x27;Georgia&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="built_in">var</span>(--theme--font_serif) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[style*=<span class="string">&#x27;iawriter-mono&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="built_in">var</span>(--theme--font_mono) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[style*=<span class="string">&#x27;SFMono-Regular&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="built_in">var</span>(--theme--font_code) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.notion-selectable</span><span class="selector-class">.notion-quote-block</span> <span class="selector-tag">div</span><span class="selector-attr">[spellcheck=<span class="string">&quot;true&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="built_in">var</span>(--theme--font_quote) <span class="meta">!important</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
  <a id="more"></a> 

<p>添加如下代码(Inconsolata替换成自己想要的并且本机已安装的字体)：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Inconsolata&#x27;</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Replace &#x27;Inconsolata&#x27; with your font name. */</span></span><br></pre></td></tr></table></figure>

<p>如下图：<br><img src="https://www.helloimg.com/images/2020/12/15/160803546261ac77064836a7a7.png" alt="160803546261ac77064836a7a7.png"></p>
<p>第四步：打开notion-enhancer</p>
<p>Enjoy!</p>
]]></content>
      <categories>
        <category>notion</category>
      </categories>
      <tags>
        <tag>notion</tag>
      </tags>
  </entry>
  <entry>
    <title>【Anytype】- 最强Notion替代品！Notion可以卸载了！！！ (先导篇)</title>
    <url>/mhiauge.github.io/2021/12/09/%E3%80%90Anytype%E3%80%91-%E6%9C%80%E5%BC%BANotion%E6%9B%BF%E4%BB%A3%E5%93%81%EF%BC%81Notion%E5%8F%AF%E4%BB%A5%E5%8D%B8%E8%BD%BD%E4%BA%86%EF%BC%81%EF%BC%81%EF%BC%81-%E5%85%88%E5%AF%BC%E7%AF%87/</url>
    <content><![CDATA[<h4 id="Anytype是什么？"><a href="#Anytype是什么？" class="headerlink" title="Anytype是什么？"></a>Anytype是什么？</h4><p>​    如封面图所示，Anytype is a new wiki tool。和notion一样，anytype是一个All in one应用。同时，anytype是一款区块链技术笔记应用。但如果说是笔记应用，那有点片面了，它可以记录一切你想记录的东西，这个东西在anytype中被称为Object，稍微有点面向对象编程基础的同学会很熟悉。</p>
<p><img src="https://gitee.com/xOysen/mypicture/raw/master/202112091021764.webp" alt=""></p>
<h4 id="为什么要用Anytype？"><a href="#为什么要用Anytype？" class="headerlink" title="为什么要用Anytype？"></a>为什么要用Anytype？</h4><p>​    和notion相比，anytype支持离线使用，和obsidian相比，antype有Set(类似notion的database)。同时，anytype支持自定义Object，你可以自己创造属于自己的对象(object)！不仅如此，对象之间的关系(relation)、多种对象共同构成的一个类型(type)以及多种类型共同构成的一个集合(set)，统统都可以自己创造！</p>
<p><img src="https://gitee.com/xOysen/mypicture/raw/master/202112091023502.webp" alt="官方示例"></p>
  <a id="more"></a> 

<h4 id="如何使用Anytype？"><a href="#如何使用Anytype？" class="headerlink" title="如何使用Anytype？"></a>如何使用Anytype？</h4><p>​    和notion一样，使用”/“创造一个对象，基本操作和notion高度相似。所不同的是没有像notion那样的目录树。另外和notion相比，目前还没有简易表格和同步块，不过从官方的roadmap来看，这些功能都会很快补齐。</p>
<p>一开始在首页点击+号按钮，会提示创建一个Object，任何类型的事物都是一个对象：人、书、音乐家、文件、想法、地点、数字等，当然也包括一个页面(Page)。具体教程可以参照官方文档：<a href="https://doc.anytype.io/d/">https://doc.anytype.io/d/</a></p>
<p><img src="https://gitee.com/xOysen/mypicture/raw/master/202112091023656.webp" alt=""><br>page页面示例</p>
<h4 id="内测版"><a href="#内测版" class="headerlink" title="内测版"></a>内测版</h4><p>​    目前网上已开放anytype的下载链接(下载地址：<a href="https://download.anytype.io/">https://download.anytype.io/</a> )，但仍需要邀请码才能使用，邀请码只能通过参加anytype的alpha内测获得，方法是在anytype官网填写资料，申请加入内测等待队列，等轮到你的时候，会收到一封邮件，要求使用zoom参加远程视频会议，你可以选择参加会议的时间，参加完会议之后，便会收到一封含有邀请码和下载地址的邮件。</p>
<p><img src="https://gitee.com/xOysen/mypicture/raw/master/202112091024894.webp" alt=""></p>
<h4 id="内测版体验感受"><a href="#内测版体验感受" class="headerlink" title="内测版体验感受"></a>内测版体验感受</h4><ul>
<li><p>没有中文。和notion一样，虽然没有中文不影响使用，但是还是有很多字词一眼看上去不能及时反应过来是什么意思，用起来没有中文的舒服，希望尽快添加，不要像notion一样，传中文版传了大半年也没见着。。</p>
</li>
<li><p>没有目录树。和notion比不习惯，虽然之前也了解过像RoamResearch这样的双链笔记概念，也能理解没有目录树，而是关系图谱是为了按照人脑思维记录笔记和想法(卡片盒笔记法Zettelkasten)，但是目录树带来的直观和全局感受是这类软件给不了的。</p>
</li>
</ul>
<p><img src="https://gitee.com/xOysen/mypicture/raw/master/202112091024931.webp" alt=""></p>
<h4 id="notion导入"><a href="#notion导入" class="headerlink" title="notion导入"></a>notion导入</h4><p>​    目前anytype只支持从notion导入，而且经过实际测试发现，导入过程比较慢，本人大概1000个page。</p>
<p><img src="https://gitee.com/xOysen/mypicture/raw/master/202112091025463.webp" alt=""></p>
<h4 id="创新功能"><a href="#创新功能" class="headerlink" title="创新功能"></a>创新功能</h4><ul>
<li><p>Anytype有四个基本元素(Fundamentals)，分别是Object、Relation、Type和Set。</p>
</li>
<li><p>anytype独有的pin code可以保护数据安全，防止别人看到你的数据</p>
</li>
</ul>
<h4 id="和手机端同步"><a href="#和手机端同步" class="headerlink" title="和手机端同步"></a>和手机端同步</h4><p>目前有两种方式：</p>
<p>方式1：扫描qr 码</p>
<p><img src="https://gitee.com/xOysen/mypicture/raw/master/202112091025665.webp" alt=""></p>
<p>方式2：输入Keychain phrase</p>
<p><img src="https://gitee.com/xOysen/mypicture/raw/master/202112091026524.webp" alt=""></p>
<p>需要注意的是，Keychain默认模糊显示，需要查看，只需用鼠标点击一次即可清晰</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>虽然尚处于内测版的anytype还有许多小bug，但是对日常使用影响不算太大，如果你等待notion离线模式等到花都谢了，且为了数据安全，急于使用离线版的notion，那么可以考虑尝试一下anytype。</p>
]]></content>
  </entry>
</search>
